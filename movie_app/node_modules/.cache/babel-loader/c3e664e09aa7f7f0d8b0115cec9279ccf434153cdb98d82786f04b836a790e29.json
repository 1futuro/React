{"ast":null,"code":"var _jsxFileName = \"/Users/mirae/Desktop/personal-workspace/movie_app/src/App.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      isLoading: false,\n      // 어떤 데이터를 처음 가져올 때 사용 cf. isFetching : 데이터를 다시 가져올 때 사용\n      movies: []\n    };\n    this.getMovies = async () => {\n      // async : 자바스크립트에게 getMovies() 함수는 시간이 필요하고\n      // const movies = await axios.get('https://yts-proxy.now.sh/list_movies.json'); // await : axios.get() 의 실행을 기다려달라고 말하는 것\n      // console.log(movies.data.data.movies);\n      const {\n        data: {\n          data: {\n            movies\n          }\n        }\n      } = await axios.get('https://yts-proxy.now.sh/list_movies.json');\n      console.log(movies);\n      // this.setState({ movies : movies }) // 첫번째 movies : state, 두번째 : 구조분해할당으로 얻은 데이터가 있는 변수\n      this.setState({\n        movies\n      }); // 객체의 키와 대입할 변수의 이름이 같으면 위를 아래와 같이 축약 가능\n    };\n  }\n\n  componentDidMount() {\n    // 영화 데이터 로딩 완료되면\n    // setTimeout (() => {\n    // \tthis.setState({ isLoading : false });\n    // }, 6000);\n    this.getMovies();\n  }\n  render() {\n    const {\n      isLoading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isLoading ? 'Loading...' : 'We are ready'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 10\n    }, this); // 로딩 완료 시 Loading 출력, 6초 후 We are ready 출력\n  }\n}\n\nexport default App;","map":{"version":3,"names":["React","axios","App","Component","state","isLoading","movies","getMovies","data","get","console","log","setState","componentDidMount","render"],"sources":["/Users/mirae/Desktop/personal-workspace/movie_app/src/App.js"],"sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nclass App extends React.Component{ \n\tstate = {\n\t\tisLoading : false, // 어떤 데이터를 처음 가져올 때 사용 cf. isFetching : 데이터를 다시 가져올 때 사용\n\t\tmovies : [],\n\t}\n\tgetMovies = async () => { // async : 자바스크립트에게 getMovies() 함수는 시간이 필요하고\n\t\t// const movies = await axios.get('https://yts-proxy.now.sh/list_movies.json'); // await : axios.get() 의 실행을 기다려달라고 말하는 것\n\t\t// console.log(movies.data.data.movies);\n\t\tconst {\n\t\t\tdata : {\n\t\t\t\tdata : { movies }\n\t\t\t},\n\t\t} = await axios.get('https://yts-proxy.now.sh/list_movies.json');\n\t\tconsole.log(movies);\n\t\t// this.setState({ movies : movies }) // 첫번째 movies : state, 두번째 : 구조분해할당으로 얻은 데이터가 있는 변수\n\t\tthis.setState({ movies }); // 객체의 키와 대입할 변수의 이름이 같으면 위를 아래와 같이 축약 가능\n\t}\n\n\tcomponentDidMount(){\n\t\t// 영화 데이터 로딩 완료되면\n\t\t// setTimeout (() => {\n\t\t// \tthis.setState({ isLoading : false });\n\t\t// }, 6000);\n\t\tthis.getMovies();\n\t}\n\n\trender(){\n\t\tconst { isLoading } = this.state;\n\t\treturn <div>{isLoading ? 'Loading...' : 'We are ready'}</div> // 로딩 완료 시 Loading 출력, 6초 후 We are ready 출력\n\t}\n}\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO;AAAC;AAE1B,MAAMC,GAAG,SAASF,KAAK,CAACG,SAAS;EAAA;IAAA;IAAA,KAChCC,KAAK,GAAG;MACPC,SAAS,EAAG,KAAK;MAAE;MACnBC,MAAM,EAAG;IACV,CAAC;IAAA,KACDC,SAAS,GAAG,YAAY;MAAE;MACzB;MACA;MACA,MAAM;QACLC,IAAI,EAAG;UACNA,IAAI,EAAG;YAAEF;UAAO;QACjB;MACD,CAAC,GAAG,MAAML,KAAK,CAACQ,GAAG,CAAC,2CAA2C,CAAC;MAChEC,OAAO,CAACC,GAAG,CAACL,MAAM,CAAC;MACnB;MACA,IAAI,CAACM,QAAQ,CAAC;QAAEN;MAAO,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC;EAAA;;EAEDO,iBAAiB,GAAE;IAClB;IACA;IACA;IACA;IACA,IAAI,CAACN,SAAS,EAAE;EACjB;EAEAO,MAAM,GAAE;IACP,MAAM;MAAET;IAAU,CAAC,GAAG,IAAI,CAACD,KAAK;IAChC,oBAAO;MAAA,UAAMC,SAAS,GAAG,YAAY,GAAG;IAAc;MAAA;MAAA;MAAA;IAAA,QAAO,EAAC;EAC/D;AACD;;AACA,eAAeH,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}